<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zen Cart Documentation â€“ Plugins</title>
    <link>/zendocs_test1/dev/plugins/</link>
    <description>Recent content in Plugins on Zen Cart Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/zendocs_test1/dev/plugins/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Dev: Rules for Plugins</title>
      <link>/zendocs_test1/dev/plugins/rules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/zendocs_test1/dev/plugins/rules/</guid>
      <description>
        
        
        &lt;h2 id=&#34;what-is-a-contributionaddonplugin&#34;&gt;What is a Contribution/Addon/Plugin?&lt;/h2&gt;
&lt;p&gt;The Open Source community has many great benefits. One such benefit is the ability for many people to collectively share their knowledge, creativity, and expertise by extending the capabilities of existing software products.  It&amp;rsquo;s very common for someone to install a product such as Zen Cart and want to make some customizations unique to their business, and then share those changes by contributing back to the Zen Cart community for everyone&amp;rsquo;s benefit.  Packaging up the new/changed files along with instructions on how to implement those onto another site is essentially what a contribution/addon comprises.&lt;/p&gt;
&lt;h2 id=&#34;acceptable-contributions&#34;&gt;Acceptable Contributions&lt;/h2&gt;
&lt;p&gt;Addon/Contribution/Plugin authors who wish to discuss and support their addon via the Zen Cart support site must post their contribution to the &amp;ldquo;Plugins&amp;rdquo; area of the Zen Cart support site.   Modules which are not in the Plugins area are not to be discussed on the Zen Cart support forum.&lt;/p&gt;
&lt;p&gt;The Zen Cart Support Forum is the place to explore and create new ideas and features; it is not a venue for advertising and promotion. Paid/commercial addons will not be accepted for the Downloads section, and advertisements for such will not be allowed on the forum.&lt;/p&gt;
&lt;p&gt;Contributions containing content which could be construed as objectionable or unsuited for general use are not acceptable and will thus be rejected.&lt;/p&gt;
&lt;h2 id=&#34;addoncontribution-requirements&#34;&gt;Addon/Contribution Requirements&lt;/h2&gt;
&lt;p&gt;Contributed Addons which are hosted in the Zen Cart &amp;ldquo;downloads&amp;rdquo; area must comply with the following standards:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;License: Must be GPL, since it&amp;rsquo;s integrating into Zen Cart core code, which is GPL. A complete copy of the license should be included in the contribution files, preferably as a separate file. If an addon is free-standing (ie: doesn&amp;rsquo;t use &lt;em&gt;any&lt;/em&gt; existing Zen Cart files in order to operate) then it can be licensed under another license provided that license is fully compatible with GPL.&lt;/p&gt;
&lt;p&gt;You can find the GPL license details at:  &lt;a href=&#34;http://www.gnu.org/licenses/licenses.html#GPL&#34;&gt;http://www.gnu.org/licenses/licenses.html#GPL&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File Format: Contributions should be submitted in .ZIP format wherever possible for maximum compatibility to those who would download it (other compression formats are harder to use and less likely to have readily-available support for decompressing).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File Size: The file should be as SMALL AS POSSIBLE. Excessively large graphics or PDF files should be avoided.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation: See &amp;ldquo;Documentation Requirements&amp;rdquo; below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support: A support thread in the appropriate Addons/Contributions area of the Zen Cart support forum should be opened following activation of a submitted contribution, where free support for that addon will delivered by the author and the community at large. Support for the addon should take place on the Zen Cart forum.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;plugin-contents&#34;&gt;Plugin Contents:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Documentation files (see &amp;ldquo;Documentation Requirements&amp;rdquo; below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PHP files: The zipped distribution should contain a complete directory structure of files which should be added/edited/merged to effect implementation of the contribution.  The built-in override system should be used where possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jQuery: The default Zen Cart template includes automatic loading of jQuery from the jQuery CDN. Your plugin should NOT include the jQuery package. If it needs jQuery, it should expect that the store&amp;rsquo;s template already loads jQuery. That said, you should ensure your plugin works with the latest version of jQuery available at the time of posting/updating your plugin. It would be beneficial to also note what versions of jQuery your plugin &amp;ldquo;requires&amp;rdquo; and &amp;ldquo;is compatible with&amp;rdquo;, so storeowners have an idea what changes they may need to make or whether your plugin is compatible with the tech tools already on their site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL files: If there are database changes required, an SQL file should be supplied containing any SQL commands which need to be run by the person installing the contribution.
An &amp;ldquo;uninstall&amp;rdquo; SQL script should be included as well so the end user can uninstall the SQL changes if they choose to remove the contribution.&lt;/p&gt;
&lt;p&gt;Any included .SQL files should be written without the use of database table-prefixes (such as &lt;code&gt;zen_&lt;/code&gt;), since a default Zen Cart install doesn&amp;rsquo;t use any such prefixes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; More advanced module writers may elect to have built-in SQL setup capability, as long as uninstall instructions/scripts are provided.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updates: If you are submitting an update to a contribution, please be sure to include the full set of files comprising that contribution. There should not be a need to install a prior version before installing your update. Each submission should be complete.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unacceptable-submissions&#34;&gt;Unacceptable Submissions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; acceptable to submit crippled modules which are only teasers for paid services. ie:  a &amp;ldquo;limited&amp;rdquo; module with a sales pitch for a &amp;ldquo;full featured&amp;rdquo; commercial add-on is not permitted.&lt;/li&gt;
&lt;li&gt;Having &amp;ldquo;donate to me&amp;rdquo; buttons in the add-on, either admin-side or storefront-side or is not permitted. A single statement about where to send donations may be added to the documentation, but should be discrete and not plastered all over the place.&lt;/li&gt;
&lt;li&gt;Connectors to commercial services, such as embedded affiliate links or referral tracking links are not permitted.&lt;/li&gt;
&lt;li&gt;In the interest of protecting the end-user&amp;rsquo;s privacy and identity, any sort of call-home capability is forbidden, whether disclosed or not.&lt;/li&gt;
&lt;li&gt;Obfuscating or encrypting (such as via ionCube, Zend Guard, etc.) is &lt;em&gt;not&lt;/em&gt; acceptable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;documentation-requirements&#34;&gt;Documentation Requirements&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Complete documentation for the contribution must be contained in the contribution&amp;rsquo;s distribution zip file, preferably in a file named &lt;code&gt;README-addonnamehere.TXT&lt;/code&gt; (or &lt;code&gt;README.md&lt;/code&gt;). Using a URL shortcut/link to point to another website for readme and/or install/uninstall documentation is not acceptable.&lt;/li&gt;
&lt;li&gt;The author should be acknowledged - and a single link to their site is acceptable, as is a tasteful request for donations.&lt;/li&gt;
&lt;li&gt;Prior authors/contributors should be acknowledged.&lt;/li&gt;
&lt;li&gt;Documentation should include clear steps outlining what to do once the contribution has been unzipped, including where to put the unzipped files and how to do any database updates/changes.&lt;/li&gt;
&lt;li&gt;Documentation should be written with the &amp;ldquo;newbie&amp;rdquo; in mind &amp;hellip; ie: Don&amp;rsquo;t make assumptions that the person using the contribution has any more understanding than how to unzip the file. This helps address the lowest-common-denominator skill-set and helps minimize support questions which can cause frustration and time drain on the author to supply support.&lt;/li&gt;
&lt;li&gt;Documentation should include uninstall instructions in case someone wants to cleanly remove the addon from their store &amp;hellip; without breaking normal operation or leaving old fragments/data behind.  This should address any files to be removed, any folders to be removed, any permissions changes to be undone, and any SQL changes/deletions applicable to the addon.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;submission&#34;&gt;Submission&lt;/h2&gt;
&lt;p&gt;New plugins should be submitted using the &lt;a href=&#34;https://www.zen-cart.com/downloads.php?do=add&#34;&gt;Submit New Plugin form&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Submissions will be reviewed for compliance and acceptability. Such reviews happen approximately once or twice weekly.  Contribution authors will be notified by email when their contribution has been activated.&lt;/p&gt;
&lt;p&gt;Updates to existing contributions should be uploaded as &lt;b&gt;updates&lt;/b&gt; to the existing contribution, and not as new contributions with merely a different version number.  To do this, find the plugin in the Plugins Library, and click the &lt;em&gt;Submit an Updated Version&lt;/em&gt; link below the orange Download button.&lt;/p&gt;
&lt;p&gt;When doing an update, it is appropriate to acknowledge prior work done by other contributors, including their copyright notices. Submitting an update for the purpose of rebranding with one&amp;rsquo;s own credits is frowned upon.&lt;/p&gt;
&lt;p&gt;The Zen Cart team reserves the right at its own discretion to reject or deny any contribution and/or update, with or without notification, especially if it fails to comply with these published standards or if it risks being dangerous or confusing to those who might try to use it.&lt;/p&gt;
&lt;p&gt;Submitting a contribution means you agree with the GPL and consent for your contribution to be used under the terms of the GPL.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Dev: Tips on creating a plugin</title>
      <link>/zendocs_test1/dev/plugins/tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/zendocs_test1/dev/plugins/tips/</guid>
      <description>
        
        
        &lt;h2 id=&#34;security&#34;&gt;Security&lt;/h2&gt;
&lt;p&gt;It is wise to ensure that ALL your PHP plugin files include a line near the top which checks whether &lt;code&gt;IS_ADMIN_FLAG&lt;/code&gt; is defined. This way if you have a file that&amp;rsquo;s accessed via unauthorized methods then it will just abort. For example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if (!defined(&#39;IS_ADMIN_FLAG&#39;)) die();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Other variations for specific use in either admin or catalog might check whether it is set to boolean &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;optimizing-the-use-of-overrides&#34;&gt;Optimizing the use of Overrides&lt;/h2&gt;
&lt;p&gt;There are built-in override capabilities in Zen Cart to prevent needing to edit some core files which would otherwise need updating.&lt;/p&gt;
&lt;p&gt;(As a reminder, the override basics are covered in the storefront help; 
you may read 
&lt;a href=&#34;/zendocs_test1/user/first_steps/overrides/&#34;&gt;the introduction&lt;/a&gt;, 
&lt;a href=&#34;/zendocs_test1/user/new_user_topics/overrides/&#34;&gt;the details&lt;/a&gt;, 
and then 
&lt;a href=&#34;/zendocs_test1/user/template/template_overrides/&#34;&gt;the summary&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Some of the commonly-overlooked override capabilities are listed here:&lt;/p&gt;
&lt;h3 id=&#34;database_tablesphp--filenamesphp&#34;&gt;database_tables.php &amp;amp; filenames.php&lt;/h3&gt;
&lt;p&gt;Combine your extra details for these two files into one file, and then add it to both the storefront and the admin:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;includes/extra_datafiles/my-contribution-name_datafiles.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin/includes/extra_datafiles/my-contribution-name_datafiles.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(these will auto-load)&lt;/p&gt;
&lt;h3 id=&#34;stylesheetcss&#34;&gt;stylesheet.css&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;includes/templates/YOURTEMPLATE/css/styles_my-contribution-name.css&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(This will auto-load)&lt;/p&gt;
&lt;h2 id=&#34;do-not-auto-delete-your-installer&#34;&gt;Do not auto delete your installer!&lt;/h2&gt;
&lt;p&gt;Once upon a time someone thought it would be clever to delete the installation script after running it.&lt;/p&gt;
&lt;p&gt;A common pattern was to create a script in YOURADMIN/includes/init_includes (or perhaps YOURADMIN/includes/functions/extra_functions) which performed the installation and then deleted itself.&lt;/p&gt;
&lt;p&gt;Please note: THIS IS A TERRIBLE IDEA.  Don&amp;rsquo;t do this.&lt;/p&gt;
&lt;p&gt;The reason is simple.  Frequently people set up a test cart with a test database on their local machine in order to do an upgrade, and install all the files.  They will then install the same fileset on their live server at upgrade time.  If your installer auto-deletes, it won&amp;rsquo;t be available for them when their live database is being used.&lt;/p&gt;
&lt;p&gt;A better practice is to check the database and see if the install has 
already been done.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;zen_page_key_exists&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check for specific configuration keys you would have added.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;automatic-new-version-checks&#34;&gt;Automatic New Version checks&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;plugin_version_check_for_updates&lt;/code&gt; to call the Zen Cart plugin server so that users will know if you have a new release. See how this is done in an existing plugin such as USPS or Square.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$new_version_details = plugin_version_check_for_updates(self::USPS_ZEN_CART_PLUGIN_ID, self::USPS_CURRENT_VERSION);
if ($new_version_details !== false) {
    $this-&amp;gt;title .= &amp;#39;&amp;lt;span class=&amp;#34;alert&amp;#34;&amp;gt;&amp;#39; . &amp;#39; - NOTE: A NEW VERSION OF THIS PLUGIN IS AVAILABLE. &amp;lt;a href=&amp;#34;&amp;#39; . $new_version_details[&amp;#39;link&amp;#39;] . &amp;#39;&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;[Details]&amp;lt;/a&amp;gt;&amp;#39; . &amp;#39;&amp;lt;/span&amp;gt;&amp;#39;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;database-change-checks&#34;&gt;Database change checks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ensure your schema is correct.  See &lt;code&gt;tableCheckup&lt;/code&gt; in &lt;code&gt;includes/modules/payment/paypal.php&lt;/code&gt; for an example of how to do this.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$fieldOkay1 = (method_exists($sniffer, &amp;#39;field_type&amp;#39;)) ? $sniffer-&amp;gt;field_type(TABLE_PAYPAL, &amp;#39;txn_id&amp;#39;, &amp;#39;varchar(20)&amp;#39;, true) : -1;
 ... 

if ($fieldOkay1 !== true) {
  $db-&amp;gt;Execute(&amp;#34;ALTER TABLE &amp;#34; . TABLE_PAYPAL . &amp;#34; CHANGE payment_type payment_type varchar(40) NOT NULL default &amp;#39;&amp;#39;&amp;#34;);
  ... 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Ensure all required database entries are present in the configuration table.  Insert them if they are not.  See &lt;code&gt;keys&lt;/code&gt; function in &lt;code&gt;includes/modules/payment/authorizenet.php&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if (!defined(&amp;#39;MODULE_PAYMENT_AUTHORIZENET_CURRENCY&amp;#39;)) {
  $db-&amp;gt;Execute(&amp;#34;INSERT INTO &amp;#34; . TABLE_CONFIGURATION . &amp;#34; (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, set_function, date_added) VALUES (&amp;#39;Currency Supported&amp;#39;, &amp;#39;MODULE_PAYMENT_AUTHORIZENET_CURRENCY&amp;#39;, &amp;#39;USD&amp;#39;, &amp;#39;Which currency is your Authnet Gateway Account configured to accept?&amp;lt;br&amp;gt;(Purchases in any other currency will be pre-converted to this currency before submission using the exchange rates in your store admin.)&amp;#39;, &amp;#39;6&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;zen_cfg_select_option(array(\&amp;#39;USD\&amp;#39;, \&amp;#39;CAD\&amp;#39;, \&amp;#39;GBP\&amp;#39;, \&amp;#39;EUR\&amp;#39;, \&amp;#39;AUD\&amp;#39;, \&amp;#39;NZD\&amp;#39;), &amp;#39;, now())&amp;#34;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;adding-configuration-settings&#34;&gt;Adding Configuration settings&lt;/h2&gt;
&lt;p&gt;If your plugin requires new configuration data, see &lt;a href=&#34;/zendocs_test1/dev/plugins/adding_config/&#34;&gt;Adding a configuration setting&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;avoiding-the-missing-menu-problem&#34;&gt;Avoiding the Missing Menu problem&lt;/h2&gt;
&lt;p&gt;If your plugin is an admin page, remember that some storeowners may want non-superusers to be able to run your utility.   Be sure you have created the relevant &lt;code&gt;admin_pages&lt;/code&gt; table entries - see &lt;a href=&#34;/zendocs_test1/user/troubleshooting/admin_menu_item_missing/&#34;&gt;Admin menu item is missing&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;checking-zen-cart-version&#34;&gt;Checking Zen Cart version&lt;/h2&gt;
&lt;p&gt;Your plugin may need to do something different depending on the Zen Cart version. Use the &lt;code&gt;PROJECT_VERSION_&lt;/code&gt; settings in &lt;code&gt;includes/version.php&lt;/code&gt; for this.  As an example, this checks for a Zen Cart version of 1.5.7 or higher:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if (version_compare(PROJECT_VERSION_NAME . &amp;#39; &amp;#39; . PROJECT_VERSION_MAJOR . &amp;#39;.&amp;#39; . PROJECT_VERSION_MINOR, &amp;#39;1.5.7&amp;#39;, &amp;#39;&amp;gt;=&amp;#39;)) {
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;more-checks&#34;&gt;More Checks&lt;/h2&gt;
&lt;p&gt;Since Zen Cart 1.5.8, all modules (shipping, payment and order_total) have supported an optional function called &lt;code&gt;get_configuration_errors&lt;/code&gt;.  This allows a developer to verify the configuration settings and report on problems.&lt;/p&gt;
&lt;h2 id=&#34;other-resources&#34;&gt;Other Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/zendocs_test1/dev/code/creating_menu/&#34;&gt;Creating a menu item&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/zendocs_test1/dev/code/creating_tables/&#34;&gt;Creating or altering tables&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/zendocs_test1/dev/code/forms/&#34;&gt;Building a form&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;forum-resources&#34;&gt;Forum Resources&lt;/h2&gt;
&lt;p&gt;If you run into trouble working on your plugin, you can always post your question on the &lt;a href=&#34;https://www.zen-cart.com/forumdisplay.php?43-Contribution-Writing-Guidelines&#34;&gt;Contribution-Writing Subforum&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Dev: Upgrading 1.3.X era plugins</title>
      <link>/zendocs_test1/dev/plugins/upgrading_to_1.5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/zendocs_test1/dev/plugins/upgrading_to_1.5/</guid>
      <description>
        
        
        &lt;p&gt;A number of features have been changed or added in v1.5.0. This may have broken some addons which were built for older versions. The following information may be helpful as you prepare to upgrade your site and/or convert your custom code or addons to work with v1.5&lt;/p&gt;
&lt;h2 id=&#34;admin-menu-controls&#34;&gt;Admin Menu Controls&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;admin/includes/boxes/xxxxxx_dhtml.php&lt;/code&gt; files and &lt;code&gt;admin/includes/boxes/extra_boxes/*.php&lt;/code&gt; files which formerly controlled menu choices have been removed. These files no longer have any effect on admin menus.
Instead you will need to use the Admin Profiles menu to grant permissions to user profiles and profiles to users.
You can use the admin menus (Admin Page Registration) to add the appropriate menu choices as well.&lt;/p&gt;
&lt;p&gt;Plugin authors can use function calls to &lt;code&gt;zen_register_admin_page()&lt;/code&gt; and &lt;code&gt;zen_deregister_admin_pages()&lt;/code&gt; to install/remove menu options for their plugins.&lt;/p&gt;
&lt;h2 id=&#34;rewriting-addon-admin-pages-to-use-form-posts-instead-of-gets&#34;&gt;Rewriting addon admin pages to use form POSTs instead of GETs&lt;/h2&gt;
&lt;p&gt;In the interest of mitigating against CSRF issues, it is necessary to use GET parameters &lt;em&gt;only&lt;/em&gt; when indicating selection criteria, and NEVER when performing destructive actions or database write operations.
There is a forum thread which outlines some guidance in the process of rewriting addons in this way: &lt;a href=&#34;https://www.zen-cart.com/showthread.php?t=184616&#34;&gt;https://www.zen-cart.com/showthread.php?t=184616&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Forms in v1.5.0 and newer must use security tokens such as those set by properly using &lt;code&gt;zen_draw_form&lt;/code&gt; instead of hard-coded
tags and must use POSTs for all CRUD actions, leaving GETs for only filter-related activities.&lt;/p&gt;
&lt;h2 id=&#34;moving-to-the-encapsulated-plugin-manager&#34;&gt;Moving to the Encapsulated Plugin manager&lt;/h2&gt;
&lt;p&gt;As an recommended next step, follow the guide &lt;a href=&#34;/zendocs_test1/dev/plugins/encapsulated_plugins/converting/&#34;&gt;Converting an older plugin&lt;/a&gt; to use the new encapsulated plugin manager.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Dev: Adding a configuration setting</title>
      <link>/zendocs_test1/dev/plugins/adding_config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/zendocs_test1/dev/plugins/adding_config/</guid>
      <description>
        
        
        &lt;p&gt;If you are creating a plugin or customizing some code, and you want to create a setting which can be changed in the admin without modifying code, you can put it in the database in an appropriate configuration group.  For example, a value relating to shipping should go in configuration group 7 (Shipping and Packaging).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;INSERT INTO configuration (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, last_modified, date_added) VALUES (&amp;#39;Canada Shipping Surcharge&amp;#39;, &amp;#39;CANADA_SHIPPING_SURCHARGE&amp;#39;, &amp;#39;12&amp;#39;, &amp;#39;Additional fee for shipping to Canada - added to quote from shipper&amp;#39;, 7, 125, NULL, now());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Global settings should go in configuration group 1 (My Store).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;INSERT INTO configuration (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, last_modified, date_added) VALUES (&amp;#39;Cut  Charge&amp;#39;, &amp;#39;PER_CUT_CHARGE&amp;#39;, &amp;#39;1.25&amp;#39;, &amp;#39;Enter the cut charge&amp;#39;, 1, 125, NULL, now());
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;distributing-configuration-changes&#34;&gt;Distributing configuration changes&lt;/h2&gt;
&lt;p&gt;If you are adding configuration data as part of a plugin for distribution, 
you can tell people to run a SQL file with your changes in the installation instructions, or you can do it automatically.&lt;/p&gt;
&lt;p&gt;To make configuration changes automatically, add a new function to &lt;code&gt;includes/functions/extra_functions&lt;/code&gt; (or the same folder on the admin side), and do the operations there after verifying they haven&amp;rsquo;t already been done.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
if (!defined(&amp;#39;SPAM_TEST_TEXT&amp;#39;)) {
    $db-&amp;gt;Execute(
        &amp;#34;INSERT INTO &amp;#34; . TABLE_CONFIGURATION . &amp;#34; 
            (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, date_added, use_function, set_function) 
         VALUES 
            ( &amp;#39;Hidden input field name.&amp;#39;, &amp;#39;SPAM_TEST_TEXT&amp;#39;, &amp;#39;should_be_273&amp;#39;, &amp;#39;You should change this field name like &amp;amp;quot;sams_cat&amp;amp;quot;.&amp;#39;, &amp;#39;19&amp;#39;, &amp;#39;501&amp;#39;, now(), NULL, NULL)&amp;#34;
    );
... 
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Dev: Adopting an orphan plugin</title>
      <link>/zendocs_test1/dev/plugins/adoption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/zendocs_test1/dev/plugins/adoption/</guid>
      <description>
        
        
        &lt;p&gt;For a variety of reasons, plugins sometimes get abandoned by their creators. 
It could be that the original author has retired, moved on to other work, 
or sometimes even passed away.&lt;/p&gt;
&lt;p&gt;Community members with development and debugging skills are urged to consider picking up support for plugins that have been abandoned.&lt;/p&gt;
&lt;h2 id=&#34;dos-and-donts&#34;&gt;Do&amp;rsquo;s and Don&amp;rsquo;ts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Do not remove anyone else&amp;rsquo;s copyright or authorship claims.  You are welcome to add yourself, but don&amp;rsquo;t take anything away.&lt;/li&gt;
&lt;li&gt;Do not claim original authorship if you aren&amp;rsquo;t the original author.  Make it clear that you&amp;rsquo;re building on someone else&amp;rsquo;s work.&lt;/li&gt;
&lt;li&gt;Make an effort to reach out to the original author to be sure the work has been abandoned.  It could be that the author just doesn&amp;rsquo;t think more work is needed.&lt;/li&gt;
&lt;li&gt;Follow the &lt;a href=&#34;/zendocs_test1/dev/plugins/php_updating/&#34;&gt;migration guides&lt;/a&gt; to bring the plugin up to the current level of PHP.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Dev: Encapsulated Plugins</title>
      <link>/zendocs_test1/dev/plugins/encapsulated_plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/zendocs_test1/dev/plugins/encapsulated_plugins/</guid>
      <description>
        
        
        &lt;p&gt;In Zen Cart v1.5.7,  a Plugin Manager was added to begin allowing support for Admin-Only plugins using the new architecture.&lt;/p&gt;
&lt;p&gt;The plugin architecture allows plugins to be encapsulated into a hierarchical directory structure
that mimics the Zen Cart directory structure.&lt;/p&gt;
&lt;p&gt;So plugin files no longer need to be placed within the disparate Zen Cart core directories, 
but rather exist in directories below a &lt;code&gt;zc_plugins&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;A new plugin manager page allows for the plugin to be installed/un-installed and enabled/disabled.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; At the moment plugins only work for admin side code. Plugins for catalog will be introduced
in Zen Cart v1.5.8&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Dev: Technical - Building help for your admin plugin</title>
      <link>/zendocs_test1/dev/plugins/help/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/zendocs_test1/dev/plugins/help/</guid>
      <description>
        
        
        &lt;hr&gt;

Please note: This is technical content suitable only for individuals with software development skills; it is not intended for general Zen Cart users. 
&lt;br&gt;


&lt;h2 id=&#34;help-for-new-admin-pages&#34;&gt;Help for New Admin Pages&lt;/h2&gt;
&lt;p&gt;If your plugin creates a new page, the ability to provide help has been built-in since Zen Cart 1.5.8.  If you are not yet using this version or higher, you can merge &lt;a href=&#34;https://github.com/zencart/zencart/pull/4243/commits/ea92e4a950ba0c373ec081a3472d16f5030a70c1&#34;&gt;this PR&lt;/a&gt; into your cart.&lt;/p&gt;
&lt;p&gt;Use the &lt;a href=&#34;https://docs.zen-cart.com/dev/code/notifiers/#auto-loaded-observers&#34;&gt;observer autoloading&lt;/a&gt; feature of Zen Cart admin observers (available since Zen Cart 1.5.7), and create a new file called &lt;code&gt;admin/includes/classes/observers/auto.MyPluginHelp.php&lt;/code&gt;.  (Be sure to follow the naming conventions for observer autoloading!)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php
class zcObserverMyPluginHelp extends base {
  function __construct() {
    $this-&amp;gt;attach($this, array(&amp;#39;NOTIFIER_PLUGIN_HELP_PAGE_URL_LOOKUP&amp;#39;));
  }

  function update(&amp;amp;$class, $eventID, $page, &amp;amp;$help_page) {
     if ($eventID == &amp;#39;NOTIFIER_PLUGIN_HELP_PAGE_URL_LOOKUP&amp;#39;) {
        if ($page == FILENAME_MYPLUGIN_NAME) {
           $help_page = &amp;#34;link-to-your-help-page&amp;#34;; 
        }
     }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are not running Zen Cart 1.5.7 or higher, you will need to pull in &lt;a href=&#34;https://github.com/zencart/zencart/commit/bc195baf258c11b73f29de41020e1c0505e4d462&#34;&gt;this PR&lt;/a&gt; to your cart to get admin observers to autoload.&lt;/p&gt;
&lt;h2 id=&#34;help-for-modules-shipping-payment-or-order-totals&#34;&gt;Help for Modules (Shipping, Payment or Order Totals)&lt;/h2&gt;
&lt;p&gt;Module help is another feature which has been built-in since Zen Cart 1.5.8.  If you are not yet using this version or higher, you can merge &lt;a href=&#34;https://github.com/zencart/zencart/commit/77d4434ed5469c2f65e79a890ac6a4cb4fe85ac4&#34;&gt;this PR&lt;/a&gt; into your cart.&lt;/p&gt;
&lt;p&gt;The help function returns an array. If the array key &lt;code&gt;link&lt;/code&gt; is set, then pressing the Help button will open a new tab for that link.  If the key &lt;code&gt;body&lt;/code&gt; is set, then the value data for &lt;code&gt;body&lt;/code&gt; will be displayed in a modal dialog.&lt;/p&gt;
&lt;h2 id=&#34;examples-of-php-help-files&#34;&gt;Examples of PHP Help Files&lt;/h2&gt;
&lt;p&gt;Quite often plain text help (i.e. a &lt;code&gt;.html&lt;/code&gt; file) is perfectly adequate, but if you need to make reference to the values of settings, pull in files, or do other dynamic operations, you&amp;rsquo;ll want to use a &lt;code&gt;.php&lt;/code&gt; help file.&lt;/p&gt;
&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;
&lt;p&gt;To have access to database settings, functions, and everything else, you need to pull in the configure file.  This is a two step process since you&amp;rsquo;re not at the top level of either admin or the storefront.  First, &lt;code&gt;chdir&lt;/code&gt; to the admin (or catalog) folder, then pull it in.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php 
chdir(&amp;#34;..&amp;#34;);
require &amp;#39;includes/application_top.php&amp;#39;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You still have to account for being in a subfolder when building links - see examples below.&lt;/p&gt;
&lt;h3 id=&#34;displaying-and-linking-to-config-values-in-core-menus&#34;&gt;Displaying and Linking to Config values in Core menus&lt;/h3&gt;
&lt;p&gt;Suppose you created a database entry with configuration key SPECIAL_FEE in the Admin &amp;gt; Configuration &amp;gt; My Store section.  Here&amp;rsquo;s how you could access it and reference it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php
echo &amp;#39;Current Special Fee is $&amp;#39; . SPECIAL_FEE . &amp;#39;.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;#39;;
echo &amp;#39;To change this value, go to &amp;lt;a href=&amp;#34;../configuration.php?gID=1&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;Admin &amp;gt; Configuration &amp;gt; My Store&amp;lt;/a&amp;gt; &amp;lt;br&amp;gt;&amp;#39;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;displaying-and-linking-to-config-values-in-plugin-menus&#34;&gt;Displaying and Linking to Config values in Plugin menus&lt;/h3&gt;
&lt;p&gt;If you don&amp;rsquo;t know what the group id is, you have to query it. 
Rather than querying the group title (a text string that could change), query the configuration group of a specific key in that group.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php 
$group = $db-&amp;gt;Execute(&amp;#34;SELECT * FROM &amp;#34; . TABLE_CONFIGURATION . &amp;#34; WHERE configuration_key = &amp;#39;PO_SEND_PACKING_LISTS&amp;#39;&amp;#34;);
$gID = $group-&amp;gt;fields[&amp;#39;configuration_group_id&amp;#39;];
echo &amp;#39;Settings for this plugin are configured in &amp;lt;a href=&amp;#34;&amp;#39;  . HTTPS_CATALOG_SERVER . DIR_WS_ADMIN . &amp;#39;../configuration.php?gID=&amp;#39; . $gID . &amp;#39;&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;Admin &amp;gt; Configuration &amp;gt; Dropship Purchase Orders&amp;lt;/a&amp;gt; &amp;lt;br&amp;gt;&amp;#39;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;collaborating-on-help&#34;&gt;Collaborating on Help&lt;/h3&gt;
&lt;p&gt;If you need to allow multiple people to update the help simultaneously, consider linking out to a collaboration tool such as Google Docs.&lt;/p&gt;
&lt;h3 id=&#34;pulling-in-a-function&#34;&gt;Pulling in a function&lt;/h3&gt;
&lt;p&gt;If you have created a function with a bunch of hardcoded cases that the storeowner needs to refer to (perhaps to tell you when to add a new one), you can use reflection to show the code.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$func = new ReflectionFunction(&amp;#39;name-of-function&amp;#39;);
$filename = $func-&amp;gt;getFileName();
$start_line = $func-&amp;gt;getStartLine() - 1;
$end_line = $func-&amp;gt;getEndLine();
$length = $end_line - $start_line;

$source = file($filename);
$body = implode(&amp;#34;&amp;#34;, array_slice($source, $start_line, $length));
echo &amp;#39;&amp;lt;pre&amp;gt;&amp;#39;;
print_r($body);
echo &amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;putting-help-files-on-a-server&#34;&gt;Putting help files on a server&lt;/h3&gt;
&lt;p&gt;If you are deploying help files to a newly created folder, be sure to follow the guidelines in &lt;a href=&#34;/zendocs_test1/user/customizing/add_pages/#direct-access-to-files&#34;&gt;Direct Access to Files&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Dev: Updating plugins for higher levels of PHP</title>
      <link>/zendocs_test1/dev/plugins/php_updating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/zendocs_test1/dev/plugins/php_updating/</guid>
      <description>
        
        
        &lt;p&gt;The Zen Cart core is updated for the current release of PHP as each release is done.  You can see the mapping from Zen Cart version to PHP version in the &lt;a href=&#34;/zendocs_test1/user/first_steps/server_requirements/#php-version&#34;&gt;server requirements&lt;/a&gt; document.&lt;/p&gt;
&lt;p&gt;But what about plugins?&lt;/p&gt;
&lt;p&gt;Well, updating plugins needs to be done by the community.  The first person to check with, of course, would be the plugin author, but they may not be able to do the work (for whatever reason). In this case, it could be an &lt;a href=&#34;/zendocs_test1/dev/plugins/adoption/&#34;&gt;orphan plugin that needs adoption&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following guidance is available for upgraders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/en/migration81.php&#34;&gt;Migrating from PHP 8.0.x to PHP 8.1.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/en/migration80.php&#34;&gt;Migrating from PHP 7.4.x to PHP 8.0.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/en/migration74.php&#34;&gt;Migrating from PHP 7.3.x to PHP 7.4.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/en/migration73.php&#34;&gt;Migrating from PHP 7.2.x to PHP 7.3.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/en/migration72.php&#34;&gt;Migrating from PHP 7.1.x to PHP 7.2.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/en/migration71.php&#34;&gt;Migrating from PHP 7.0.x to PHP 7.1.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/en/migration70.php&#34;&gt;Migrating from PHP 5.6.x to PHP 7.0.x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Dev: Upgrading plugins to work with 1.5.8/PHP 8.0&#43;</title>
      <link>/zendocs_test1/dev/plugins/upgrading_to_158/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/zendocs_test1/dev/plugins/upgrading_to_158/</guid>
      <description>
        
        
        &lt;h2 id=&#34;array-based-language-files&#34;&gt;Array Based Language Files&lt;/h2&gt;
&lt;p&gt;To avoid duplicate define notices from PHP, Zen Cart 1.5.8 uses &lt;a href=&#34;/zendocs_test1/dev/languages/158_language_files/&#34;&gt;Array Based Language Files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you need to include a language file, the old style of doing so&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  $langfile = DIR_WS_LANGUAGES . $_SESSION[&amp;#39;language&amp;#39;] . &amp;#34;/modules/order_total/&amp;#34; .  &amp;#34;ot_group_pricing.php&amp;#34;;
  include_once ($langfile);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will no longer work for 1.5.8 and above.  However, plugin authors may want to make their code compatible with both 1.5.7 and 1.5.8.  Here&amp;rsquo;s one approach:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  $filename = &amp;#34;ot_group_pricing.php&amp;#34;; 
  $old_langfile = DIR_WS_LANGUAGES . $_SESSION[&amp;#39;language&amp;#39;] . &amp;#34;/modules/order_total/&amp;#34; .  $filename; 
  $new_langfile = DIR_WS_LANGUAGES . $_SESSION[&amp;#39;language&amp;#39;] . &amp;#34;/modules/order_total/&amp;#34; .  &amp;#34;lang.&amp;#34; . $filename; 
  if (file_exists($old_langfile)) {
          include_once ($old_langfile);
  } else if (file_exists($new_langfile)) {
     global $languageLoader; 
     $folder = &amp;#34;/modules/order_total/&amp;#34;; 
     $languageLoader-&amp;gt;loadExtraLanguageFiles(DIR_FS_CATALOG . DIR_WS_LANGUAGES,  $_SESSION[&amp;#39;language&amp;#39;], $filename, $folder);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;creating-definitions&#34;&gt;Creating Definitions&lt;/h3&gt;

      </description>
    </item>
    
  </channel>
</rss>
